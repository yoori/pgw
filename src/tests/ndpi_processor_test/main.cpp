#include <stdlib.h>
#include <iostream>

#include <dpi/User.hpp>
#include <dpi/NDPIPacketProcessor.hpp>

int main()
{
  dpi::Config config;

  std::shared_ptr<dpi::NDPIPacketProcessor> ndpi_packet_processor =
    std::make_shared<dpi::NDPIPacketProcessor>(config, 1);

  /*
  const int PROTOS[] = {
    0x06, // TCP
    0x11, // UDP
    0x01 // ICMP
  };

  unsigned long count = 0;
  while (true)
  {
    if (count % 10000 == 0)
    {
      std::cout << "Processed " << count << " packets" << std::endl;
    }
    const int SIZE = ::rand() % 2080 + 24;
    pcap_pkthdr header;
    header.caplen = SIZE;
    header.len = SIZE;
    std::vector<unsigned char> packet_buf(SIZE, 0);
    for (int i = 0; i < SIZE; ++i)
    {
      packet_buf[i] = ::rand() % 256;
    }

    // Is IPv4
    packet_buf[10] = 0x08;
    packet_buf[11] = 0x08;
    packet_buf[12] = 0x45;

    // Tcp or UDP
    int proto_i = ::rand() % (sizeof(PROTOS) / sizeof(PROTOS[0]));
    packet_buf[23] = PROTOS[proto_i];

    ndpi_packet_processor->process_packet(&header, &packet_buf[0]);
    ++count;
  }
  */

  const unsigned char PACKET[] = {
    0xfa,0x16,0x3e,0x65,0x8d,0x48,0x44,0x6a,0x2e,0x94,0x96,0x03,0x08,0x00,0x45,0x00,0x00,0xd7,0x61,0x71,0x00,0x00,0x39,0x11,0x7f,0x51,0x4d,0x58,0x08,0x08,0x0a,0xf3,0x40,0x01,0x00,0x35,0xb1,0xb5,0x00,0xc3,0x8a,0x20,0xdf,0x75,0x81,0x80,0x00,0x01,0x00,0x02,0x00,0x01,0x00,0x00,0x04,0x65,0x64,0x67,0x65,0x09,0x6d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x03,0x63,0x6f,0x6d,0x00,0x00,0x41,0x00,0x01,0xc0,0x0c,0x00,0x05,0x00,0x01,0x00,0x00,0x00,0x26,0x00,0x20,0x0b,0x65,0x64,0x67,0x65,0x2d,0x64,0x6f,0x6d,0x61,0x69,0x6e,0x0e,0x74,0x72,0x61,0x66,0x66,0x69,0x63,0x6d,0x61,0x6e,0x61,0x67,0x65,0x72,0x03,0x6e,0x65,0x74,0x00,0xc0,0x30,0x00,0x05,0x00,0x01,0x00,0x00,0x00,0x27,0x00,0x27,0x12,0x65,0x64,0x67,0x65,0x2d,0x6d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x2d,0x63,0x6f,0x6d,0x07,0x61,0x78,0x2d,0x30,0x30,0x30,0x32,0x09,0x61,0x78,0x2d,0x6d,0x73,0x65,0x64,0x67,0x65,0xc0,0x4b,0x08,0x61,0x2d,0x6d,0x73,0x65,0x64,0x67,0x65,0xc0,0x4b,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0x32,0x00,0x23,0x03,0x6e,0x73,0x31,0xc0,0x83,0x06,0x6d,0x73,0x6e,0x68,0x73,0x74,0xc0,0x11,0x78,0x2b,0x22,0xe5,0x00,0x00,0x07,0x08,0x00,0x00,0x03,0x84,0x00,0x24,0xea,0x00,0x00,0x00,0x00,0xf0
  };

  std::cout << "sz = " << sizeof(PACKET) << std::endl;
  pcap_pkthdr header;
  header.caplen = sizeof(PACKET);
  header.len = sizeof(PACKET);
  ndpi_packet_processor->process_packet(&header, PACKET);

  return 0;
}

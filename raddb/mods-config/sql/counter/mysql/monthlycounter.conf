#
#  This query properly handles calls that span from the
#  previous reset period into the current period but
#  involves more work for the SQL server than those
#  below
#
query = "\
	SELECT IFNULL(SUM(acctsessiontime - GREATEST((%{control.monthlycounter-reset-start} - UNIX_TIMESTAMP(acctstarttime)), 0)), 0) \
	FROM radacct \
	WHERE username='%{${key}}' \
	AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control.monthlycounter-reset-start}'"

#
#  This query ignores calls that started in a previous
#  reset period and continue into into this one. But it
#  is a little easier on the SQL server
#
#query = "\
#	SELECT IFNULL(SUM(acctsessiontime), 0) \
#	FROM radacct\
#	WHERE username='%{${key}}' \
#	AND acctstarttime > FROM_UNIXTIME('%{control.monthlycounter-reset-start}')"

#
#  This query is the same as above, but demonstrates an
#  additional counter parameter '%{control.monthlycounter-reset-end}' which is the
#  timestamp for the end of the period
#
#query = "\
#	SELECT IFNULL(SUM(acctsessiontime), 0) \
#	FROM radacct \
#	WHERE username='%{${key}}' \
#	AND acctstarttime BETWEEN FROM_UNIXTIME('%{control.monthlycounter-reset-start}') \
#	AND FROM_UNIXTIME('%{control.monthlycounter-reset-end}')"
